#!/usr/bin/env ode
{
    <- 5;
}
#@
#<derive(Debug)>
Tool _= {
  int:weight,
  int:length,
  int:id,
}
Swingable _= {
  \:swing &self, &thing:target -> bool,
}
Breakable _= '{
  '\:is_broken &self -> bool,
}

# enums can contain type constraints, or implemented types
Tool ~= '{
  IndestructibleHmmr(Tool:Swingable),
  Hmmr(Tool:Swingable:Breakable),
}

# an immutable impl block can implement immutable constraints
UnbreakableHammer:Tool,Swingable,Eq ^= {
  id = random(), # <-- immutable, so this would be ran when the struct is initialized, not now.
  \:swing &self, &thing:target -> bool: {
    << distance_from_target < self.length; # immutable scopes require return because they are not ordered.
    distance_from_target = thing.distance(self);
  },
  \:eq &self, &thing:other -> bool: {
    << self.id == other.id;
  },
}

#^
an mutable impl block can implement immutable and mutable constraints
and may create both immutable and mutable values
#$
Hammer:Swingable,Breakable,Eq ^= '{
  id = random(), # <-- immutable, so this would be ran when the struct is initialized, not now.
  broken '= false,
  '\:is_broken &self -> bool: {
    broken # mutable scope can implicitly return at the end
  },
  \:swing &self, &thing:target -> bool: thing.distance(self) < self.length,
  \:eq &self, &thing:other -> bool: {
    <- self.id == other.id
  },
}

mace:Hammer = { weight = 10, length = 20, };

\ name:&str, followup:&str, greeting:&str:"Hello" -> String: {
  "$[greeting], $[name]! $[followup]!"
}

amyGreet = greet "Amy";

greeting = amyGreet "How are you?";

{
    println greeting;
}

[[hello this is a literal]]
[=[hello this is another literal]=]
charval = `\n`
#^ testcom #$I am outside of the block comment
